{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = useWindowDimensions;\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\nvar React = _interopRequireWildcard(require(\"react\"));\nvar _reactNative = require(\"react-native\");\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nfunction useWindowDimensions() {\n  var _React$useState = React.useState(function () {\n      var _Dimensions$get = _reactNative.Dimensions.get('window'),\n        _Dimensions$get$heigh = _Dimensions$get.height,\n        height = _Dimensions$get$heigh === void 0 ? 0 : _Dimensions$get$heigh,\n        _Dimensions$get$width = _Dimensions$get.width,\n        width = _Dimensions$get$width === void 0 ? 0 : _Dimensions$get$width;\n      return {\n        height: height,\n        width: width\n      };\n    }),\n    _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),\n    dimensions = _React$useState2[0],\n    setDimensions = _React$useState2[1];\n  React.useEffect(function () {\n    var onChange = function onChange(_ref) {\n      var window = _ref.window;\n      var width = window.width,\n        height = window.height;\n      setDimensions(function (d) {\n        if (width === d.width && height === d.height) {\n          return d;\n        }\n        return {\n          width: width,\n          height: height\n        };\n      });\n    };\n\n    onChange({\n      window: _reactNative.Dimensions.get('window')\n    });\n    _reactNative.Dimensions.addEventListener('change', onChange);\n    return function () {\n      return _reactNative.Dimensions.removeEventListener('change', onChange);\n    };\n  }, []);\n  return dimensions;\n}","map":{"version":3,"mappings":";;;;;;AAAA;AACA;;;;AAIe,SAASA,mBAAT,GAA+B;EAC5C,sBAAoCC,KAAK,CAACC,QAAN,CAAe,YAAM;MAEvD,sBAAkCC,uBAAU,CAACC,GAAX,CAAe,QAAf,CAAlC;QAAA,wCAAQC,MAAM;QAANA,MAAM,sCAAG,CAAX;QAAA,wCAAcC,KAAK;QAALA,KAAK,sCAAG;MAE5B,OAAO;QAAED,MAAF,EAAEA,MAAF;QAAUC;MAAV,CAAP;IACD,CALmC,CAApC;IAAA;IAAOC,UAAD;IAAaC,aAAb;EAONP,KAAK,CAACQ,SAAN,CAAgB,YAAM;IACpB,IAAMC,QAAQ,GAAG,SAAXA,QAAQ,OAA2C;MAAA,IAArCC;MAClB,IAAQL,KAAF,GAAoBK,MAA1B,CAAQL,KAAF;QAASD,SAAWM,MAA1B,CAAeN;MAEfG,aAAa,CAAEI,WAAD,EAAO;QACnB,IAAIN,KAAK,KAAKM,CAAC,CAACN,KAAZ,IAAqBD,MAAM,KAAKO,CAAC,CAACP,MAAtC,EAA8C;UAC5C,OAAOO,CAAP;QACD;QAED,OAAO;UAAEN,KAAF,EAAEA,KAAF;UAASD;QAAT,CAAP;MACD,CANY,CAAb;IAOD,CAVD;;IAcAK,QAAQ,CAAC;MAAEC,MAAM,EAAER,uBAAU,CAACC,GAAX,CAAe,QAAf;IAAV,CAAD,CAAR;IAEAD,uBAAU,CAACU,gBAAX,CAA4B,QAA5B,EAAsCH,QAAtC;IAEA,OAAO;MAAA,OAAMP,uBAAU,CAACW,mBAAX,CAA+B,QAA/B,EAAyCJ,QAAzC,CAAb;IAAA;EACD,CApBD,EAoBG,EApBH;EAsBA,OAAOH,UAAP;AACD","names":["useWindowDimensions","React","useState","Dimensions","get","height","width","dimensions","setDimensions","useEffect","onChange","window","d","addEventListener","removeEventListener"],"sources":["useWindowDimensions.tsx"],"sourcesContent":["import * as React from 'react';\nimport { ScaledSize, Dimensions } from 'react-native';\n\n// This is similar to the new useWindowDimensions hook in react-native\n// However, we have a custom implementation to support older RN versions\nexport default function useWindowDimensions() {\n  const [dimensions, setDimensions] = React.useState(() => {\n    // `height` and `width` maybe undefined during SSR, so we initialize them\n    const { height = 0, width = 0 } = Dimensions.get('window');\n\n    return { height, width };\n  });\n\n  React.useEffect(() => {\n    const onChange = ({ window }: { window: ScaledSize }) => {\n      const { width, height } = window;\n\n      setDimensions((d) => {\n        if (width === d.width && height === d.height) {\n          return d;\n        }\n\n        return { width, height };\n      });\n    };\n\n    // We might have missed an update before the listener was added\n    // So make sure to update the dimensions\n    onChange({ window: Dimensions.get('window') });\n\n    Dimensions.addEventListener('change', onChange);\n\n    return () => Dimensions.removeEventListener('change', onChange);\n  }, []);\n\n  return dimensions;\n}\n"]},"metadata":{},"sourceType":"script"}