{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = useIsKeyboardShown;\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\nvar React = _interopRequireWildcard(require(\"react\"));\nvar _reactNative = require(\"react-native\");\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\nfunction useIsKeyboardShown() {\n  var _React$useState = React.useState(false),\n    _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),\n    isKeyboardShown = _React$useState2[0],\n    setIsKeyboardShown = _React$useState2[1];\n  React.useEffect(function () {\n    var handleKeyboardShow = function handleKeyboardShow() {\n      return setIsKeyboardShown(true);\n    };\n    var handleKeyboardHide = function handleKeyboardHide() {\n      return setIsKeyboardShown(false);\n    };\n    if (_reactNative.Platform.OS === 'ios') {\n      _reactNative.Keyboard.addListener('keyboardWillShow', handleKeyboardShow);\n      _reactNative.Keyboard.addListener('keyboardWillHide', handleKeyboardHide);\n    } else {\n      _reactNative.Keyboard.addListener('keyboardDidShow', handleKeyboardShow);\n      _reactNative.Keyboard.addListener('keyboardDidHide', handleKeyboardHide);\n    }\n    return function () {\n      if (_reactNative.Platform.OS === 'ios') {\n        _reactNative.Keyboard.removeListener('keyboardWillShow', handleKeyboardShow);\n        _reactNative.Keyboard.removeListener('keyboardWillHide', handleKeyboardHide);\n      } else {\n        _reactNative.Keyboard.removeListener('keyboardDidShow', handleKeyboardShow);\n        _reactNative.Keyboard.removeListener('keyboardDidHide', handleKeyboardHide);\n      }\n    };\n  }, []);\n  return isKeyboardShown;\n}","map":{"version":3,"mappings":";;;;;;AAAA;AACA;AAAA;AAAA;AAEe,SAASA,kBAAT,GAA8B;EAC3C,sBAA8CC,KAAK,CAACC,QAAN,CAAe,KAAf,CAA9C;IAAA;IAAOC,eAAD;IAAkBC,kBAAlB;EAENH,KAAK,CAACI,SAAN,CAAgB,YAAM;IACpB,IAAMC,kBAAkB,GAAG,SAArBA,kBAAkB;MAAA,OAASF,kBAAkB,CAAC,IAAD,CAAnD;IAAA;IACA,IAAMG,kBAAkB,GAAG,SAArBA,kBAAkB;MAAA,OAASH,kBAAkB,CAAC,KAAD,CAAnD;IAAA;IAEA,IAAII,qBAAQ,CAACC,EAAT,KAAgB,KAApB,EAA2B;MACzBC,qBAAQ,CAACC,WAAT,CAAqB,kBAArB,EAAyCL,kBAAzC;MACAI,qBAAQ,CAACC,WAAT,CAAqB,kBAArB,EAAyCJ,kBAAzC;IACD,CAHD,MAGO;MACLG,qBAAQ,CAACC,WAAT,CAAqB,iBAArB,EAAwCL,kBAAxC;MACAI,qBAAQ,CAACC,WAAT,CAAqB,iBAArB,EAAwCJ,kBAAxC;IACD;IAED,OAAO,YAAM;MACX,IAAIC,qBAAQ,CAACC,EAAT,KAAgB,KAApB,EAA2B;QACzBC,qBAAQ,CAACE,cAAT,CAAwB,kBAAxB,EAA4CN,kBAA5C;QACAI,qBAAQ,CAACE,cAAT,CAAwB,kBAAxB,EAA4CL,kBAA5C;MACD,CAHD,MAGO;QACLG,qBAAQ,CAACE,cAAT,CAAwB,iBAAxB,EAA2CN,kBAA3C;QACAI,qBAAQ,CAACE,cAAT,CAAwB,iBAAxB,EAA2CL,kBAA3C;MACD;IACF,CARD;EASD,CArBD,EAqBG,EArBH;EAuBA,OAAOJ,eAAP;AACD","names":["useIsKeyboardShown","React","useState","isKeyboardShown","setIsKeyboardShown","useEffect","handleKeyboardShow","handleKeyboardHide","Platform","OS","Keyboard","addListener","removeListener"],"sources":["useIsKeyboardShown.tsx"],"sourcesContent":["import * as React from 'react';\nimport { Keyboard, Platform } from 'react-native';\n\nexport default function useIsKeyboardShown() {\n  const [isKeyboardShown, setIsKeyboardShown] = React.useState(false);\n\n  React.useEffect(() => {\n    const handleKeyboardShow = () => setIsKeyboardShown(true);\n    const handleKeyboardHide = () => setIsKeyboardShown(false);\n\n    if (Platform.OS === 'ios') {\n      Keyboard.addListener('keyboardWillShow', handleKeyboardShow);\n      Keyboard.addListener('keyboardWillHide', handleKeyboardHide);\n    } else {\n      Keyboard.addListener('keyboardDidShow', handleKeyboardShow);\n      Keyboard.addListener('keyboardDidHide', handleKeyboardHide);\n    }\n\n    return () => {\n      if (Platform.OS === 'ios') {\n        Keyboard.removeListener('keyboardWillShow', handleKeyboardShow);\n        Keyboard.removeListener('keyboardWillHide', handleKeyboardHide);\n      } else {\n        Keyboard.removeListener('keyboardDidShow', handleKeyboardShow);\n        Keyboard.removeListener('keyboardDidHide', handleKeyboardHide);\n      }\n    };\n  }, []);\n\n  return isKeyboardShown;\n}\n"]},"metadata":{},"sourceType":"script"}