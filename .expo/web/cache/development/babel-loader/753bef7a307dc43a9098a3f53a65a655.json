{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.resolveUri = resolveUri;\nexports.selectAssetSource = selectAssetSource;\nvar _expoModulesCore = require(\"expo-modules-core\");\nvar _pathBrowserify = _interopRequireDefault(require(\"path-browserify\"));\nvar _reactNative = require(\"react-native\");\nvar _urlParse = _interopRequireDefault(require(\"url-parse\"));\nvar _AssetSourceResolver = _interopRequireDefault(require(\"./AssetSourceResolver\"));\nvar _PlatformUtils = require(\"./PlatformUtils\");\nvar assetMapOverride = (0, _PlatformUtils.getManifest)().assetMapOverride;\nfunction selectAssetSource(meta) {\n  var _manifest2$extra, _manifest2$extra$expo;\n  if (assetMapOverride && assetMapOverride.hasOwnProperty(meta.hash)) {\n    meta = Object.assign({}, meta, assetMapOverride[meta.hash]);\n  }\n  var scale = _AssetSourceResolver.default.pickScale(meta.scales, _reactNative.PixelRatio.get());\n  var index = meta.scales.findIndex(function (s) {\n    return s === scale;\n  });\n  var hash = meta.fileHashes ? meta.fileHashes[index] || meta.fileHashes[0] : meta.hash;\n  var uri = meta.fileUris ? meta.fileUris[index] || meta.fileUris[0] : meta.uri;\n  if (uri) {\n    return {\n      uri: resolveUri(uri),\n      hash: hash\n    };\n  }\n  var assetUrlOverride = (0, _PlatformUtils.getManifest)().assetUrlOverride;\n  if (assetUrlOverride) {\n    var _uri = _pathBrowserify.default.join(assetUrlOverride, hash);\n    return {\n      uri: resolveUri(_uri),\n      hash: hash\n    };\n  }\n  var fileScale = scale === 1 ? '' : \"@\" + scale + \"x\";\n  var fileExtension = meta.type ? \".\" + encodeURIComponent(meta.type) : '';\n  var suffix = \"/\" + encodeURIComponent(meta.name) + fileScale + fileExtension + \"?platform=\" + encodeURIComponent(_expoModulesCore.Platform.OS) + \"&hash=\" + encodeURIComponent(meta.hash);\n  if (/^https?:\\/\\//.test(meta.httpServerLocation)) {\n    var _uri2 = meta.httpServerLocation + suffix;\n    return {\n      uri: _uri2,\n      hash: hash\n    };\n  }\n  var manifest2 = (0, _PlatformUtils.getManifest2)();\n  if (manifest2 != null && (_manifest2$extra = manifest2.extra) != null && (_manifest2$extra$expo = _manifest2$extra.expoGo) != null && _manifest2$extra$expo.developer) {\n    var baseUrl = new _urlParse.default(\"http://\" + manifest2.extra.expoGo.debuggerHost);\n    baseUrl.set('pathname', meta.httpServerLocation + suffix);\n    return {\n      uri: baseUrl.href,\n      hash: hash\n    };\n  }\n  if ((0, _PlatformUtils.getManifest)().developer) {\n    var _baseUrl = new _urlParse.default((0, _PlatformUtils.getManifest)().bundleUrl);\n    _baseUrl.set('pathname', meta.httpServerLocation + suffix);\n    return {\n      uri: _baseUrl.href,\n      hash: hash\n    };\n  }\n  return {\n    uri: \"https://classic-assets.eascdn.net/~assets/\" + encodeURIComponent(hash),\n    hash: hash\n  };\n}\nfunction resolveUri(uri) {\n  if (!_PlatformUtils.manifestBaseUrl) {\n    return uri;\n  }\n  var _URL = new _urlParse.default(uri),\n    protocol = _URL.protocol;\n  if (protocol !== '') {\n    return uri;\n  }\n  var baseUrl = new _urlParse.default(_PlatformUtils.manifestBaseUrl);\n  var resolvedPath = uri.startsWith('/') ? uri : _pathBrowserify.default.join(baseUrl.pathname, uri);\n  baseUrl.set('pathname', resolvedPath);\n  return baseUrl.href;\n}","map":{"version":3,"mappings":"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","names":["assetMapOverride","selectAssetSource","meta","hasOwnProperty","hash","scale","AssetSourceResolver","pickScale","scales","PixelRatio","get","index","findIndex","s","fileHashes","uri","fileUris","resolveUri","assetUrlOverride","path","join","fileScale","fileExtension","type","encodeURIComponent","suffix","name","Platform","OS","test","httpServerLocation","manifest2","extra","expoGo","developer","baseUrl","URL","debuggerHost","set","href","bundleUrl","manifestBaseUrl","protocol","resolvedPath","startsWith","pathname"],"sourceRoot":"","sources":["../src/AssetSources.ts"],"sourcesContent":["import { Platform } from 'expo-modules-core';\nimport path from 'path-browserify';\nimport { PixelRatio } from 'react-native';\nimport URL from 'url-parse';\n\nimport AssetSourceResolver from './AssetSourceResolver';\nimport { manifestBaseUrl, getManifest, getManifest2 } from './PlatformUtils';\n\n// @docsMissing\nexport type AssetMetadata = {\n  hash: string;\n  name: string;\n  type: string;\n  width?: number;\n  height?: number;\n  scales: number[];\n  httpServerLocation: string;\n  uri?: string;\n  fileHashes?: string[];\n  fileUris?: string[];\n};\n\nexport type AssetSource = {\n  uri: string;\n  hash: string;\n};\n\n// Fast lookup check if asset map has any overrides in the manifest\nconst assetMapOverride = getManifest().assetMapOverride;\n\n/**\n * Selects the best file for the given asset (ex: choosing the best scale for images) and returns\n * a { uri, hash } pair for the specific asset file.\n *\n * If the asset isn't an image with multiple scales, the first file is selected.\n */\nexport function selectAssetSource(meta: AssetMetadata): AssetSource {\n  // Override with the asset map in manifest if available\n  if (assetMapOverride && assetMapOverride.hasOwnProperty(meta.hash)) {\n    meta = { ...meta, ...assetMapOverride[meta.hash] };\n  }\n\n  // This logic is based on that of AssetSourceResolver, with additional support for file hashes and\n  // explicitly provided URIs\n  const scale = AssetSourceResolver.pickScale(meta.scales, PixelRatio.get());\n  const index = meta.scales.findIndex((s) => s === scale);\n  const hash = meta.fileHashes ? meta.fileHashes[index] || meta.fileHashes[0] : meta.hash;\n\n  // Allow asset processors to directly provide the URL to load\n  const uri = meta.fileUris ? meta.fileUris[index] || meta.fileUris[0] : meta.uri;\n  if (uri) {\n    return { uri: resolveUri(uri), hash };\n  }\n\n  // Check if the assetUrl was overridden in the manifest\n  const assetUrlOverride = getManifest().assetUrlOverride;\n  if (assetUrlOverride) {\n    const uri = path.join(assetUrlOverride, hash);\n    return { uri: resolveUri(uri), hash };\n  }\n\n  const fileScale = scale === 1 ? '' : `@${scale}x`;\n  const fileExtension = meta.type ? `.${encodeURIComponent(meta.type)}` : '';\n  const suffix = `/${encodeURIComponent(\n    meta.name\n  )}${fileScale}${fileExtension}?platform=${encodeURIComponent(\n    Platform.OS\n  )}&hash=${encodeURIComponent(meta.hash)}`;\n\n  // For assets with a specified absolute URL, we use the existing origin instead of prepending the\n  // development server or production CDN URL origin\n  if (/^https?:\\/\\//.test(meta.httpServerLocation)) {\n    const uri = meta.httpServerLocation + suffix;\n    return { uri, hash };\n  }\n\n  // For assets during development using manifest2, we use the development server's URL origin\n  const manifest2 = getManifest2();\n\n  if (manifest2?.extra?.expoGo?.developer) {\n    const baseUrl = new URL(`http://${manifest2.extra.expoGo.debuggerHost}`);\n    baseUrl.set('pathname', meta.httpServerLocation + suffix);\n\n    return {\n      uri: baseUrl.href,\n      hash,\n    };\n  }\n\n  // For assets during development, we use the development server's URL origin\n  if (getManifest().developer) {\n    const baseUrl = new URL(getManifest().bundleUrl);\n    baseUrl.set('pathname', meta.httpServerLocation + suffix);\n    return { uri: baseUrl.href, hash };\n  }\n\n  // Production CDN URIs are based on each asset file hash\n  return {\n    uri: `https://classic-assets.eascdn.net/~assets/${encodeURIComponent(hash)}`,\n    hash,\n  };\n}\n\n/**\n * Resolves the given URI to an absolute URI. If the given URI is already an absolute URI, it is\n * simply returned. Otherwise, if it is a relative URI, it is resolved relative to the manifest's\n * base URI.\n */\nexport function resolveUri(uri: string): string {\n  if (!manifestBaseUrl) {\n    return uri;\n  }\n\n  const { protocol } = new URL(uri);\n  if (protocol !== '') {\n    return uri;\n  }\n\n  const baseUrl = new URL(manifestBaseUrl);\n  const resolvedPath = uri.startsWith('/') ? uri : path.join(baseUrl.pathname, uri);\n  baseUrl.set('pathname', resolvedPath);\n  return baseUrl.href;\n}\n"]},"metadata":{},"sourceType":"script"}